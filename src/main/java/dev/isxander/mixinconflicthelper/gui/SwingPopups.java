package dev.isxander.mixinconflicthelper.gui;

import net.fabricmc.loader.api.ModContainer;
import net.fabricmc.loader.impl.FabricLoaderImpl;
import net.fabricmc.loader.impl.util.LoaderUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;

public class SwingPopups {
    public static void conflict(ModContainer mod1, ModContainer mod2, Throwable th) {
        var message = """
                There has been a mod conflict to do with mixins.
                %s tried to modify code that was already modified by %s.
                
                You can go to either mod's issues page to report the issue.
                
                You can copy the issue template to your clipboard to help create an issue.
                """.stripIndent().formatted(mod1.getMetadata().getName(), mod2.getMetadata().getName(), mod1.getMetadata().getName());

        var option = JOptionPane.showOptionDialog(
                null,
                message, "Mixin Conflict Helper",
                JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE,
                null,
                new String[]{ mod1.getMetadata().getName(), mod2.getMetadata().getName(), "Copy issue template" },
                0
        );

        switch (option) {
            case 0 -> openUrl(mod1.getMetadata().getContact().get("issues").or(() ->
                    mod1.getMetadata().getContact().get("sources")).orElseThrow());

            case 1 -> openUrl(mod2.getMetadata().getContact().get("issues").or(() ->
                    mod2.getMetadata().getContact().get("sources")).orElseThrow());

            case 2 -> {
                var sw = new StringWriter();
                var pw = new PrintWriter(sw);
                th.printStackTrace(pw);
                var clipboardContent = """
                   *Message autogenerated using [MixinConflictHelper](https://github.com/isXander/MixinConflictHelper)*
                    
                   [%s](%s) is conflicting with [%s](%s).
                   
                   ```
                   %s
                   ```
                    """.stripIndent().formatted(mod1.getMetadata().getName(), mod1.getMetadata().getContact().get("sources").orElse("#"), mod2.getMetadata().getName(), mod2.getMetadata().getContact().get("sources").orElse("#"), sw.toString());

                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(clipboardContent), null);

                conflict(mod1, mod2, th);
            }
        }
    }

    public static void setupAwt(Runnable runnable) {
        try {
            var provider = FabricLoaderImpl.INSTANCE.tryGetGameProvider();
            if (provider == null && LoaderUtil.hasAwtSupport()
                    || provider != null && provider.hasAwtSupport()) {
                System.setProperty("java.awt.headless", "false");
                System.setProperty("apple.awt.application.appearance", "system");

                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                runnable.run();

                System.setProperty("java.awt.headless", "true");
            } else {
                throw new IllegalStateException("Couldn't open Frame!");
            }
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }

    private static void openUrl(String url) {
        try {
            if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                Desktop.getDesktop().browse(new URI(url));
            }
        } catch (URISyntaxException | IOException e) {
            e.printStackTrace();
        }
    }
}
